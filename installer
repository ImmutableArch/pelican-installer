#!/usr/bin/env python3

import gi
import subprocess
import threading
import gettext
import locale
import os
import sys 

from welcome_widget import WelcomeWidget
from disk_utility_widget import DiskUtilityWidget
from language_widget import LanguageWidget
from timezone_widget import TimezoneWidget 
from keyboard_layout_widget import KeyboardLayoutWidget
from user_creation_widget import UserCreationWidget
from installation_widget import InstallationWidget

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
from gi.repository import Gtk, Adw, GLib, Gdk

# --- Localization Setup ---
APP_NAME = "linexin-installer"
LOCALE_DIR = os.path.abspath("/usr/share/locale")

# Set initial language (will default to system language if not specified)
locale.setlocale(locale.LC_ALL, '')
locale.bindtextdomain(APP_NAME, LOCALE_DIR)
gettext.textdomain(APP_NAME)
_ = gettext.gettext

class MainWindow(Adw.ApplicationWindow):
    def __init__(self, app):
        super().__init__(application=app)
        self.set_title("")
        self.set_default_size(1100, 700)
        self.progress_visible = False
        self.install_started = False
        self.progress_data = ""
        self.error_message = None
        self.caro = 4
        self.set_title("") 

        # --- Main Layout Changes ---
        top_level_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_content(top_level_box)

        self.header_bar = Adw.HeaderBar()
        self.header_bar.set_title_widget(Adw.WindowTitle.new(self.get_title(), ""))
        top_level_box.append(self.header_bar)
        css_provider = Gtk.CssProvider()
        css = """
        headerbar {
            background-color: transparent;
            border: none;
            box-shadow: none;
        }
        .titlebar {
            background-color: transparent;
        }
        .proceed_button {
            font-size: 16px;
            min-width: 300px;
            min-height: 40px; 
        }
        .welcome_text {
            font-size: 40px;
        }
        .buttons_all {
            font-size: 14px;
            min-width: 150px;
            min-height: 40px;
        }
        """
        css_provider.load_from_data(css.encode())
        Gtk.StyleContext.add_provider_for_display(
            Gdk.Display.get_default(),
            css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )
        
        #Initialize all widgets
        self.welcome_page = WelcomeWidget()
        self.language_page = LanguageWidget()
        self.timezone_page = TimezoneWidget()
        self.keyboard_layout_page = KeyboardLayoutWidget()
        self.disk_utility_page = DiskUtilityWidget()
        self.user_creation_page = UserCreationWidget()
        self.installation_page = InstallationWidget()

        
        ######################
        # HEADERBAR ADDITIONS

        action_buttons_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        
        self.refresh_button = Gtk.Button.new_from_icon_name("view-refresh-symbolic")
        self.refresh_button.connect("clicked", self.disk_utility_page.on_refresh_clicked)
        self.refresh_button.set_opacity(0)
        self.refresh_button.set_sensitive(False)

        self.disks_button = Gtk.Button(label="Manage Disks", margin_bottom=5,margin_end=5, margin_top=5)
        self.disks_button.connect("clicked", self.disk_utility_page.on_open_disks_clicked)
        self.disks_button.set_opacity(0)
        self.disks_button.set_sensitive(False)

        action_buttons_box.append(self.refresh_button)
        action_buttons_box.append(self.disks_button)

        self.header_bar.pack_end(action_buttons_box)
        ###################

        # --- Main Gtk.Stack to switch between app sections ---
        self.main_stack = Gtk.Stack()
        self.main_stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        self.main_stack.set_vexpand(True)
        top_level_box.append(self.main_stack)

        # --- Instantiate all your pages ---

        self.main_stack.add_named(self.welcome_page, "welcome")
        self.main_stack.add_named(self.language_page, "language")
        self.main_stack.add_named(self.timezone_page, "timezone")
        self.main_stack.add_named(self.keyboard_layout_page, "keyboard")
        self.main_stack.add_named(self.disk_utility_page, "disk_utility")
        self.main_stack.add_named(self.user_creation_page, "usercreation")
        self.main_stack.add_named(self.installation_page, "installation")

        # --- Connect signals ---
        self.welcome_page.btn_install.connect("clicked", self.on_install_clicked)
        self.language_page.btn_back.connect("clicked", self.on_back_btn_clicked)
        self.language_page.btn_proceed.connect("clicked", self.on_language_selected)
        self.timezone_page.btn_back.connect("clicked", self.on_back_to_language_clicked)
        self.timezone_page.btn_proceed.connect("clicked", self.on_timezone_selected)
        self.keyboard_layout_page.btn_back.connect("clicked", self.on_back_to_timezone_clicked)
        self.keyboard_layout_page.btn_proceed.connect("clicked", self.on_keyboard_layout_selected)
        self.disk_utility_page.btn_back.connect("clicked", self.on_back_to_keyboard_clicked)
        #self.disk_utility_page.btn_proceed.connect("clicked", self.on_disk_utility_continue_clicked)
        self.disk_utility_page.connect("continue-to-next-page", self.on_disk_utility_validated)
        self.user_creation_page.btn_back.connect("clicked", self.on_back_to_user_creation_page_clicked)
        self.user_creation_page.btn_proceed.connect("clicked", self.on_usercreation_continue_clicked)



    def on_usercreation_continue_clicked(self, button):
        self.main_stack.set_visible_child_name("installation")
        self.installation_page.start_installation()

    def on_disk_utility_validated(self, widget):
        """Called when disk utility widget signals it's ready to proceed"""
        print("Disk utility validation completed - proceeding to user creation")
        self.main_stack.set_visible_child_name("usercreation")
        # Hide the disk management buttons when leaving disk utility page
        self.refresh_button.set_opacity(0)
        self.refresh_button.set_sensitive(False)
        self.disks_button.set_opacity(0)
        self.disks_button.set_sensitive(False)

    def on_language_selected(self, button):
        self.main_stack.set_visible_child_name("timezone")

    def on_timezone_selected(self, button):
        self.main_stack.set_visible_child_name("keyboard")

    def on_keyboard_layout_selected(self, button):
        self.main_stack.set_visible_child_name("disk_utility")




    def on_back_to_user_creation_page_clicked(self, button):
        self.main_stack.set_visible_child_name("disk_utility")
        self.refresh_button.set_opacity(1)
        self.refresh_button.set_sensitive(True)
        self.disks_button.set_opacity(1)
        self.disks_button.set_sensitive(True)

    def on_back_to_keyboard_clicked(self, button):
        self.main_stack.set_visible_child_name("keyboard")
        self.refresh_button.set_opacity(0)
        self.refresh_button.set_sensitive(False)
        self.disks_button.set_opacity(0)
        self.disks_button.set_sensitive(False)

    def on_back_to_timezone_clicked(self, button):
        self.main_stack.set_visible_child_name("timezone")

    def on_back_to_language_clicked(self, button):
        self.main_stack.set_visible_child_name("language")

    def on_back_btn_clicked(self, command):
        self.main_stack.set_visible_child_name("welcome")



    def on_install_clicked(self, button):
        # Clean up any existing config directory to save space
        config_dir = "/tmp/installer_config"
        if os.path.exists(config_dir):
            import shutil
            shutil.rmtree(config_dir)
        self.main_stack.set_visible_child_name("language")



class Installer(Adw.Application):
    def __init__(self):
        super().__init__(application_id="github.petexy.linexininstaller")

    def do_activate(self):
        win = MainWindow(self)
        win.present()

if __name__ == "__main__":
    app = Installer()
    sys.exit(app.run(sys.argv))
