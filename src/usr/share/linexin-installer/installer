#!/usr/bin/env python3

import gi
import subprocess
import threading
import gettext
import locale
import os
import sys
import shutil

from welcome_widget import WelcomeWidget
from installation_template_widget import InstallationTemplateWidget
from disk_utility_widget import DiskUtilityWidget
from language_widget import LanguageWidget
from timezone_widget import TimezoneWidget 
from keyboard_layout_widget import KeyboardLayoutWidget
from user_creation_widget import UserCreationWidget
from installation_widget import InstallationWidget
from finish_widget import FinishWidget
from simple_localization_manager import get_localization_manager
#from custom_widget import CustomWidget

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
from gi.repository import Gtk, Adw, GLib, Gdk

# --- Localization Setup ---
APP_NAME = "linexin-installer"
LOCALE_DIR = os.path.abspath("/usr/share/locale")

# Set initial language (will default to system language if not specified)
locale.setlocale(locale.LC_ALL, '')
locale.bindtextdomain(APP_NAME, LOCALE_DIR)
gettext.textdomain(APP_NAME)
_ = gettext.gettext

class MainWindow(Adw.ApplicationWindow):
    def __init__(self, app):

        config_dir = "/tmp/installer_config"
        if os.path.exists(config_dir):
            import shutil
            shutil.rmtree(config_dir)  


        super().__init__(application=app)
        self.set_title("")
        self.set_default_size(1100, 850)
        self.progress_visible = False
        self.install_started = False
        self.progress_data = ""
        self.error_message = None
        self.caro = 4

        # Connect the close request signal
        self.connect("close-request", self.on_close_request)

        # --- Main Layout Changes ---
        top_level_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_content(top_level_box)

        self.header_bar = Adw.HeaderBar()
        self.header_bar.set_title_widget(Adw.WindowTitle.new(self.get_title(), ""))
        top_level_box.append(self.header_bar)
        css_provider = Gtk.CssProvider()
        css = """
        headerbar {
            background-color: transparent;
            border: none;
            box-shadow: none;
        }
        .titlebar {
            background-color: transparent;
        }
        .proceed_button {
            font-size: 16px;
            min-width: 300px;
            min-height: 40px; 
        }
        .welcome_text {
            font-size: 40px;
        }
        .buttons_all {
            font-size: 14px;
            min-width: 150px;
            min-height: 40px;
        }
        """
        css_provider.load_from_data(css.encode())
        Gtk.StyleContext.add_provider_for_display(
            Gdk.Display.get_default(),
            css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )
        
        #Initialize all widgets - INCLUDE YOUR MAIN FUNCTION HERE
        self.welcome_page = WelcomeWidget()
        self.language_page = LanguageWidget()
        self.timezone_page = TimezoneWidget()
        self.keyboard_layout_page = KeyboardLayoutWidget()
        self.installation_template_page = InstallationTemplateWidget()
        self.disk_utility_page = DiskUtilityWidget()
        self.user_creation_page = UserCreationWidget()
        self.installation_page = InstallationWidget()
        self.installation_page.connect('installation-complete', self.on_installation_finished)
        self.finish_page = FinishWidget()
        #self.custom_page = CustomWidget()
        
        ######################
        # HEADERBAR ADDITIONS

        action_buttons_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        
        self.refresh_button = Gtk.Button.new_from_icon_name("view-refresh-symbolic")
        self.refresh_button.connect("clicked", self.disk_utility_page.on_refresh_clicked)
        self.refresh_button.set_opacity(0)
        self.refresh_button.set_sensitive(False)

        self.disks_button = Gtk.Button(label="Advanced", margin_bottom=5,margin_end=5, margin_top=5)
        self.disks_button.connect("clicked", self.disk_utility_page.on_open_disks_clicked)
        self.disks_button.set_opacity(0)
        self.disks_button.set_sensitive(False)

        action_buttons_box.append(self.refresh_button)
        action_buttons_box.append(self.disks_button)

        self.header_bar.pack_end(action_buttons_box)
        ###################

        # --- Main Gtk.Stack to switch between app sections ---
        self.main_stack = Gtk.Stack()
        self.main_stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        self.main_stack.set_vexpand(True)
        top_level_box.append(self.main_stack)

        # --- Instantiate all your pages --- ADD SHORT NAME FOR STACK TO BE PRESENT

        self.main_stack.add_named(self.welcome_page, "welcome")
        self.main_stack.add_named(self.language_page, "language")
        self.main_stack.add_named(self.timezone_page, "timezone")
        self.main_stack.add_named(self.keyboard_layout_page, "keyboard")
        self.main_stack.add_named(self.installation_template_page, "installtemplate")
        self.main_stack.add_named(self.disk_utility_page, "disk_utility")
        self.main_stack.add_named(self.user_creation_page, "usercreation")
        self.main_stack.add_named(self.installation_page, "installation")
        self.main_stack.add_named(self.finish_page, "finish")
        #self.main_stack.add_named(self.custom_page, "shortname_custom")

        # --- Localization --- NEED TO ADD YOUR SHORT NAME HERE IF YOU WANT TO LOCALIZE IT

        localization_manager = get_localization_manager()
        for page_name in ["welcome", "language", "timezone", "keyboard", "installtemplate", "disk_utility", "usercreation", "installation", "finish"]: ### Add your custom widget's short name
            page = self.main_stack.get_child_by_name(page_name)
            if page:
                localization_manager.register_widget(page)

        # Also register the main window for header bar elements
        localization_manager.register_widget(self)      

        # --- Connect signals ---
        self.welcome_page.btn_install.connect("clicked", self.on_install_clicked)
        self.language_page.btn_back.connect("clicked", self.on_back_btn_clicked)
        self.language_page.btn_proceed.connect("clicked", self.on_language_selected)
        self.timezone_page.btn_back.connect("clicked", self.on_back_to_language_clicked)
        self.timezone_page.btn_proceed.connect("clicked", self.on_timezone_selected)
        self.keyboard_layout_page.btn_back.connect("clicked", self.on_back_to_timezone_clicked)
        self.keyboard_layout_page.btn_proceed.connect("clicked", self.on_keyboard_layout_selected)
        self.installation_template_page.btn_back.connect("clicked", self.on_back_template_clicked)
        self.installation_template_page.connect("template-selected", self.on_template_selected)
        self.installation_template_page.connect("continue-to-next-page", self.on_wipe_completed)
        self.disk_utility_page.btn_back.connect("clicked", self.on_back_to_keyboard_clicked)
        self.disk_utility_page.connect("continue-to-next-page", self.on_disk_utility_validated)
        self.user_creation_page.btn_back.connect("clicked", self.on_back_to_user_creation_page_clicked)
        self.user_creation_page.btn_proceed.connect("clicked", self.on_usercreation_continue_clicked)

        #self.custom_page.btn_proceed.connect("clicked", self.on_custom_widget_continue_clicked)  ### Connecting custom widget's Continue button to work
        #self.custom_page.btn_back.connect("clicked, self.on_back_btn_on_custom_widget_clicked") ### Connecting custom widget's Back button to work


    #def on_custom_widget_continue_clicked(self, button):
    #    self.main_stack.set_visible_child_name("installation") ### MAKE SURE TO CHANGE installation TO YOUR DESIRED STACK

    #def on_back_btn_on_custom_widget_clicked(self, command):
    #    self.main_stack.set_visible_child_name("welcome")  ### MAKE SURE TO CHANGE welcome TO YOUR DESIRED STACK





    def on_installation_finished(self, widget):
        """Called when installation completes successfully"""
        print("Installation completed successfully - proceeding to finish page")
        self.main_stack.set_visible_child_name("finish")

    def get_app_directory(self):
        """Get the directory where the installer script is located"""
        return os.path.dirname(os.path.abspath(__file__))

    def on_usercreation_continue_clicked(self, button):
        self.main_stack.set_visible_child_name("installation")
        self.installation_page.start_installation()

    def on_wipe_completed(self, widget):
        """Called when wipe installation is completed successfully"""
        print("Wipe installation completed - proceeding to user creation")
        self.main_stack.set_visible_child_name("usercreation")

    def on_template_selected(self, widget, template_type, template_data):
        """Handle template selection from installation template widget"""
        print(f"Installation template selected: {template_type}")
        print(f"Template data: {template_data}")
        
        # Store the template data for later use
        self.selected_template = template_type
        self.template_data = template_data
        
        if template_type == "manual":
            # For manual partitioning, go directly to disk utility
            self.main_stack.set_visible_child_name("disk_utility")
            # Show the disk utility buttons
            self.refresh_button.set_opacity(1)
            self.refresh_button.set_sensitive(True)
            self.disks_button.set_opacity(1)
            self.disks_button.set_sensitive(True)
        else:
            # For automated templates, execute them
            success = self.installation_template_page.execute_template(self.disk_utility_page)
            if success:
                if template_type == "alongside":
                    # After shrinking and auto-configuring, proceed to user creation
                    self.main_stack.set_visible_child_name("usercreation")
                elif template_type == "wipe":
                    # After wiping and auto-configuring, proceed to user creation
                    # The disk utility widget will handle the confirmation dialog
                    pass  # Will be handled by disk utility's auto-configure completion

    def on_disk_utility_validated(self, widget):
        """Called when disk utility widget signals it's ready to proceed"""
        print("Disk utility validation completed - proceeding to user creation")

        if hasattr(self, 'selected_template') and self.selected_template in ["alongside", "wipe"]:
            # For auto-configured templates, skip directly to user creation
            pass
        self.main_stack.set_visible_child_name("usercreation")
        # Hide the disk management buttons when leaving disk utility page
        self.refresh_button.set_opacity(0)
        self.refresh_button.set_sensitive(False)
        self.disks_button.set_opacity(0)
        self.disks_button.set_sensitive(False)

    def on_language_selected(self, button):
        self.main_stack.set_visible_child_name("timezone")

    def on_timezone_selected(self, button):
        self.main_stack.set_visible_child_name("keyboard")

    def on_keyboard_layout_selected(self, button):
        self.main_stack.set_visible_child_name("installtemplate")

    def on_installtemplate_continue_clicked(self, button):

        self.refresh_button.set_opacity(1)
        self.refresh_button.set_sensitive(True)
        self.disks_button.set_opacity(1)
        self.disks_button.set_sensitive(True)


    def on_back_template_clicked(self, button):
        self.main_stack.set_visible_child_name("keyboard")

    def on_back_to_user_creation_page_clicked(self, button):
        self.main_stack.set_visible_child_name("disk_utility")
        self.refresh_button.set_opacity(1)
        self.refresh_button.set_sensitive(True)
        self.disks_button.set_opacity(1)
        self.disks_button.set_sensitive(True)

    def on_back_to_keyboard_clicked(self, button):
        self.main_stack.set_visible_child_name("installtemplate")
        self.refresh_button.set_opacity(0)
        self.refresh_button.set_sensitive(False)
        self.disks_button.set_opacity(0)
        self.disks_button.set_sensitive(False)

    def on_back_to_timezone_clicked(self, button):
        self.main_stack.set_visible_child_name("timezone")

    def on_back_to_language_clicked(self, button):
        self.main_stack.set_visible_child_name("language")

    def on_back_btn_clicked(self, command):
        self.main_stack.set_visible_child_name("welcome")



    def on_install_clicked(self, button):
        
        """Create installer_config directory and copy required files"""
        config_dir = "/tmp/installer_config"
        app_dir = self.get_app_directory()
        try:
            # Create the config directory
            os.makedirs(config_dir, exist_ok=True)
            print(f"Created config directory: {config_dir}")
            
            # Copy files if they exist
            files_to_copy = ["bootloader.sh", "post-install.sh", "remove_gpu.sh", "remove_ucode.sh"]
            for filename in files_to_copy:
                source_path = os.path.join(app_dir, filename)
                dest_path = os.path.join(config_dir, filename)
                if os.path.exists(source_path):
                    shutil.copy2(source_path, dest_path)
                    os.chmod(dest_path, 0o755)
                    print(f"Copied {filename} to {config_dir}")
                else:
                    print(f"Warning: {filename} not found in {app_dir}")
            
            # Always advance to next screen regardless of file copying results
            self.main_stack.set_visible_child_name("language")
            
        except Exception as e:
            print(f"Error setting up installer config: {e}")
            # You might want to show an error dialog here instead of silently failing

        
    def on_close_request(self, window):
        """Handle application close request - unmount directories before closing"""
        print("Application is closing, attempting to unmount directories...")
        
        # List of directories to unmount (in order)
        mount_points = [
            "/tmp/linexin_installer/root/boot",
            "/tmp/linexin_installer/root",
            "/tmp/linexin_installer/rootfs"
        ]
        
        for mount_point in mount_points:
            try:
                # Check if the directory exists and is mounted
                if os.path.exists(mount_point):
                    print(f"Attempting to unmount {mount_point}...")
                    result = subprocess.run(
                        ["umount", "-R", mount_point], 
                        capture_output=True, 
                        text=True, 
                        timeout=10
                    )
                    
                    if result.returncode == 0:
                        print(f"Successfully unmounted {mount_point}")
                    else:
                        print(f"Failed to unmount {mount_point}: {result.stderr}")
                        # Try a lazy unmount as fallback
                        try:
                            fallback_result = subprocess.run(
                                ["umount", "-l", mount_point], 
                                capture_output=True, 
                                text=True, 
                                timeout=5
                            )
                            if fallback_result.returncode == 0:
                                print(f"Successfully lazy-unmounted {mount_point}")
                            else:
                                print(f"Lazy unmount also failed for {mount_point}: {fallback_result.stderr}")
                        except Exception as e:
                            print(f"Exception during lazy unmount of {mount_point}: {e}")
                else:
                    print(f"Mount point {mount_point} does not exist, skipping...")
                    
            except subprocess.TimeoutExpired:
                print(f"Timeout while trying to unmount {mount_point}")
            except Exception as e:
                print(f"Exception while trying to unmount {mount_point}: {e}")
        
        print("Unmount operations completed, closing application.")
        # Return False to allow the window to close
        return False    


class Installer(Adw.Application):
    def __init__(self):
        super().__init__(application_id="github.petexy.linexininstaller")

    def do_activate(self):
        win = MainWindow(self)
        win.present()

if __name__ == "__main__":
    app = Installer()
    sys.exit(app.run(sys.argv))
